#!/bin/sh
#
# coreservices
# chkconfig: 2345 98 55
# description: Initstartup script for core services
# processname: java

# Source function library.
. /etc/init.d/functions

BASE_DIR="/opt/$name$"
PROC="$name$"
USER="$name$"
prog="$name$"
$name$_PID="\$BASE_DIR/RUNNING_PID"
STDOUT_LOG="logs/stdout.log"
CONFIG_DIR="\$BASE_DIR/conf"
FULL_COMMAND="nohup \$BASE_DIR/start &"


fail_if_proc_is_running(){
        IS_RUNNING=`pgrep -f "\$PROC"`
  if [ ! -z "\$IS_RUNNING" ];  then
          failure
          echo
    echo "Warning: Process is already running, pid: \$IS_RUNNING"
          exit 0;
  fi
}

fail_if_proc_is_not_running(){
        IS_RUNNING=`pgrep -f "\$PROC"`
  if [ -z "\$IS_RUNNING" ];  then
          failure
          echo
    echo "Warning:  Process was not running!"
    RET=0
  else
    RET=1
  fi
  return \$RET
}

start()
{
        chown -R \$USER.\$USER \$BASE_DIR
        echo -n "Starting \$prog: "
        fail_if_proc_is_running
        cd \$BASE_DIR
  runuser -g \$USER --command="\$FULL_COMMAND" --preserve-environment \$USER && success || failure
        echo -n "please wait 2 seconds.....  "
        sleep 2
        IS_RUNNING=`pgrep -f "\$PROC"`
        echo -n "\$prog status: "
        if [ -n "\$IS_RUNNING" ];  then
    success
          RETVAL=1
        else
    failure
          RETVAL=0
        fi
        echo
        return \$RETVAL
}

stop()
{
        echo -n "Stopping \$prog: "
        fail_if_proc_is_not_running
        IS_RUNNING=`pgrep -f "\$PROC"`
        if [ -n "\$IS_RUNNING" ];  then
          kill `pgrep -f "\$PROC"` && success || failure
          RETVAL=\$?
  fi
        rm -f \$$name$_PID
        echo
        return \$RETVAL
}

status()
{
        IS_RUNNING=`pgrep -f "\$PROC"`
  if [ -n "\$IS_RUNNING" ];  then
          echo " \$prog  is running, pid: \$IS_RUNNING"
        else
    echo " \$prog is not running"
        fi
}

case "\$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
  status
  ;;
    restart)
        stop
        echo "Please wait, restarting"
        sleep 2
        start
        ;;
    *)
        echo "Usage: \$0 {start|stop|restart|status|}"
        RETVAL=1
esac
exit \$RETVAL